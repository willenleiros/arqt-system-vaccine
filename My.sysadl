Model SysADLModel ; package VASystemTypes { value type Int { } value type Boolean { } value type String { } value type Void { } value type Real { } value type Temperature { dimension = Temperature } dimension Temperature value type CelciusTemperature extends Temperature { unit = Celcius dimension = Temperature } unit Celcius { dimension = Temperature } unit Fahrenheit { dimension = Temperature } value type FahrenheitTemperature extends Temperature { unit = Fahrenheit dimension = Temperature } enum StateVaccine { valid , invalid } }   Requirement PostoVacinaFR ( 3 ) { text = "O sistema tem varios postos de vacinas  no qual são reponsaveis por receber, ler e processar as informações do distribuidor de vacinas" Requirement ExtracaoVacinasFR ( 3.1 ) { text = "O componente deve extrair a quantidade de vacinas recebidas do QRCode" } Requirement VerificaoVacinaFR ( 3.2 ) { text = "O componente deve ter a capacidade de ler e verificar as condições de armazenamento da vacina e o estado da temperatura" } Requirement EstadoVacina ( 3.3 ) { text = "Deve ser registrado o estado atual da vacina" } } Requirement ConfiabilidadeNFR ( 2 ) { text = "O sistema deve fazer testes de extração e verificação de dados dos containers de vacinas" }Requirement ToleranciaNFR ( 1 ) { text = "O sistema deve ser capaz de recuperar-se ao surgimento de falhas " } Requirement ControladorCentroReceptorFR ( 1 ) { text = "O controlador deve ser capaz de ler o QRCode de container " Requirement QuantitativoDeVacinasFR ( 1.1 ) { text = "O controlador extrai os dados quantitativos de vacinas de um container" } Requirement TemperaturaArmazenamentoFR ( 1.2 ) { text = "O controlador extrai a temperatura de armazenamento das vacinas de um container" } } Requirement CentroDistribuidorFR ( 2 ) { text = "Componente central de distribuição para gerenciamento das vacinas" derive ConfiabilidadeNFR , ToleranciaNFR ; Requirement DistribuirVacinasFR ( 2.1 ) { text = "Capacidade de distribuir as vacinas para locais especificos de acordo com o quantitativo populacional" } } package VASystemComponents { import VASystemTypes ; import VASystemPorts ; import VASystemConnectors ; component def SistemaCentroDistribuidorCP { ports :   tempIPT : CelciusTemperatureIPT ; qtdVacIPT : QtdVacinasIPT ;       configuration { components :       WebServiceIBGECP : WebServiceIBGECP { using ports : qtdPopulacao : QtdPopulacaoOPT ; nomeMuncIPT : dadoMunicipioIPT ; }  PostoVacinaCP : PostoVacinaCP { using ports : qtdVacIPT : QtdVacinasIPT ; tempVacIPT : CelciusTemperatureIPT ; } ProcessadorDeVacinasCP : ProcessadorDeVacinasCP { using ports : tempCalcIPT : CelciusTemperatureIPT ; nomeMuncOPT : dadoMunicipioOPT ; qtdPopIPT : QtdPopulacaoIPT ; qtdVacPorMuncOPT : QtdVacinasOPT ; tempRecebida : CelciusTemperatureIPT ; qtdVacRecebida : QtdVacinasIPT ; } connectors :     dadoMuncCN : DadoMunicipioCN bindings nomeMuncOPT = nomeMuncIPT ; qtdPopCN : QtdPopulacaoCN bindings qtdPopulacao = qtdPopIPT ; qtdVacMuncCN : QtdVacinasCN bindings qtdVacPorMuncOPT = qtdVacIPT ; tempVacCN : TemperatureCN bindings tempCalcIPT = tempVacIPT ; delegations : qtdVacRecebida to qtdVacIPT tempRecebida to tempIPT } }
	component def ControladorCentralCP {  ports :    configuration { components :   ProcessadorQRCodeCP : ProcessadorQRCodeCP { using ports : tempMoment : CelciusTemperatureOPT ; qtdVacinas : QtdVacinasOPT ; dadoIPT : dadosContainerIPT ; } ContainerCP : ContainerCP { using ports : dadoOPT : dadosContainerOPT ; }  SistemaCentroDistribuidorCP : SistemaCentroDistribuidorCP { using ports : tempIPT : CelciusTemperatureIPT ; qtdVacIPT : QtdVacinasIPT ; } connectors : fluxoDados : DadosContainerCN bindings dadoOPT = dadoIPT ; tempConectCN : TemperatureCN bindings tempMoment = tempIPT ; qtdVacConectCN : QtdVacinasCN bindings qtdVacinas = qtdVacIPT ; } }
	component def PostoVacinaCP { ports : qtdVacIPT : QtdVacinasIPT ; tempVacIPT : CelciusTemperatureIPT ; } boundary
	component def ContainerCP { ports :   dadosQRCode : dadosContainerOPT ; } component def WebServiceIBGECP { ports : qtdPopulacao : QtdPopulacaoOPT ; nomeMuncIPT : dadoMunicipioIPT ; }
	component def ProcessadorQRCodeCP { ports : tempMoment : CelciusTemperatureOPT ; qtdVacinas : QtdVacinasOPT ; dadosQRCode : dadosContainerIPT ; } activity def SistemaCentroDistribuidorAC { body { } } action def CalcularQuantidadeDeVacinasParaMunicipio ( totalPopulacaoDoMunicipio : Int ) : Int { } component def ProcessadorDeVacinasCP { ports : tempCalcIPT : CelciusTemperatureIPT ; nomeMuncOPT : dadoMunicipioOPT ; qtdPopIPT : QtdPopulacaoIPT ; qtdVacPorMuncOPT : QtdVacinasOPT ; tempRecebida : CelciusTemperatureIPT ; qtdVacRecebida : QtdVacinasIPT ; } } package VASystemPorts { import VASystemTypes ; port def CelciusTemperatureIPT { flow in CelciusTemperature } port def CelciusTemperatureOPT { flow out CelciusTemperature } port def QtdVacinasOPT { flow out Int } port def QtdVacinasIPT { flow in Int } port def QtdPopulacaoIPT { flow in Real } port def QtdPopulacaoOPT { flow out Real } port def dadosContainerOPT { flow out String } port def dadosContainerIPT { flow in String } port def dadoMunicipioOPT { flow out String } port def dadoMunicipioIPT { flow in String } } package VASystemConnectors { import VASystemPorts ; connector def TemperatureCN { participants : ~ source : CelciusTemperatureOPT ; ~ destination : CelciusTemperatureIPT ; flows : CelciusTemperature from source to destination } connector def QtdVacinasCN { participants : ~ source : QtdVacinasOPT ; ~ destination : QtdVacinasIPT ; flows : Int from source to destination } connector def QtdPopulacaoCN { participants : ~ source : QtdPopulacaoOPT ; ~ destination : QtdPopulacaoIPT ; flows :  Real from destination to source } connector def DadosContainerCN { participants : ~ source : dadosContainerIPT ; ~ destination : dadosContainerOPT ; flows : String from source to destination } connector def DadoMunicipioCN { participants : ~ source : dadoMunicipioOPT ; ~ destination : dadoMunicipioIPT ; flows : String from source to destination } }